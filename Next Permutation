class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """

        # Largest permutation will be in descending order. In that case we just reverse the list

        # We can start traversing from right to left, first inversion we see we swap

        n = len(nums)

        if n==0:
            return []
        if n==1:
            return nums
        flag = 0
        for i in range(n-1,-1,-1):
            if i==0:
                break
            if nums[i-1] < nums[i]:
                # We have found an inversion
                flag = 1
                break
        if flag == 0:
            nums.reverse()
        else:
            pivot = nums[i-1]
            # Now we need to go through the right side (i:) which is sorted to find the smallest element larger than pivot

            k = n-1

            while nums[k]<=pivot:
                k -= 1

            nums[k], nums[i-1] = nums[i-1],nums[k]

            # We reverse the part from i to n-1

            j = n-1
            while i<j:
                nums[i], nums[j] = nums[j], nums[i]
                j -= 1
                i += 1
