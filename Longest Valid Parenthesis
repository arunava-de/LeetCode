class Solution:
    def longestValidParentheses(self, s: str) -> int:
        
        unmatched = []

        for i in range(len(s)):
            if unmatched==[]:
                unmatched.append(i)
                continue
            if s[i] == ")":
                if s[unmatched[-1]] == "(":
                    unmatched.pop()
                else:
                    unmatched.append(i)
            else:
                unmatched.append(i)

        # Now stack contains unmatched indices, the ones in-between are matched
        print(unmatched)
        if unmatched==[]:
            return len(s)
        else:
            max_diff = max(unmatched[0]-0, len(s)-unmatched[-1]-1) 
            for i in range(1,len(unmatched)):
                if unmatched[i] - unmatched[i-1] - 1>max_diff:
                    max_diff = unmatched[i] - unmatched[i-1]-1

        return max_diff
