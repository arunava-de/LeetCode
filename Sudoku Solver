class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        self.board = board
        self.solve()

    def findEmpty(self):
        for row in range(9):
            for col in range(9):
                if self.board[row][col] == '.':
                    return row, col

        return -1, -1

    def solve(self):
        row, col = self.findEmpty()
        if row == -1 and col == -1:
            # All have been assigned
            return True

        for choice in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:

            if self.isSafe(row, col, choice):
                self.board[row][col] = choice

                if self.solve():
                    return True

                self.board[row][col] = '.'

        return False

    def isSafe(self, row, col, choice):

        boxrow = row - row % 3
        boxcol = col - col % 3

        if self.checkRow(row, choice) and self.checkCol(col, choice) and self.checkSquare(boxrow, boxcol, choice):
            return True

        return False

    def checkRow(self, row, choice):
        for col in range(9):
            if self.board[row][col] == choice:
                return False

        return True

    def checkCol(self, col, choice):
        for row in range(9):
            if self.board[row][col] == choice:
                return False

        return True

    def checkSquare(self, row, col, choice):

        for i in range(row, row + 3):
            for j in range(col, col + 3):
                if self.board[i][j] == choice:
                    return False

        return True
